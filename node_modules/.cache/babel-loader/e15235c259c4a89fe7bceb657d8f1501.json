{"ast":null,"code":"import React from \"react\";\nexport const BASE_URL = 'https://strangers-things.herokuapp.com';\nexport const cohortName = '2206-ftb-et-web-ft-b';\nexport const postMessage = async (colonlessPostId, token, messageContent) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${colonlessPostId}/messages`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        message: {\n          \"content\": messageContent\n        }\n      })\n    });\n    const result = await response.json();\n    console.log(\"sucess?: \", result.success);\n    console.log(\"fetch returning: \", result.data);\n    return result.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const patchEdit = async (colonlessPostId, token, title, description, price, location, willDeliver) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${colonlessPostId}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          \"title\": title,\n          \"description\": description,\n          \"price\": price,\n          \"location\": location,\n          \"willDeliver\": willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    console.log(\"sucess?: \", result.success);\n    console.log(\"fetch returning: \", result.data.post);\n    return result.data.post;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const deletePost = async (token, postID) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${postID}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const postPost = async (token, title, description, price, location, willDeliver) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          \"title\": title,\n          \"description\": description,\n          \"price\": price,\n          \"location\": location,\n          \"willDeliver\": willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result.data.post;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getMe = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const postLogIn = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          \"username\": username,\n          \"password\": password\n        }\n      })\n    });\n    const result = await response.json();\n\n    if (result.success) {\n      return result;\n    } else {\n      return result.error;\n    }\n\n    ;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postNewUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          \"username\": username,\n          \"password\": password\n        }\n      })\n    });\n    const result = await response.json();\n    const resultToken = result.data.token;\n    return resultToken;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchPosts = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`);\n    const data = await response.json();\n    const actualPosts = data.data.posts;\n    return actualPosts;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchAllPosts = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    const actualPosts = data.data.posts;\n    return actualPosts;\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"names":["React","BASE_URL","cohortName","postMessage","colonlessPostId","token","messageContent","response","fetch","method","headers","body","JSON","stringify","message","result","json","console","log","success","data","error","patchEdit","title","description","price","location","willDeliver","post","deletePost","postID","postPost","getMe","postLogIn","username","password","user","postNewUser","resultToken","fetchPosts","actualPosts","posts","fetchAllPosts"],"sources":["/Users/helby1/Desktop/FULL STACK ACADEMY/Course_Work/project_09/Strangers Things/src/api/index.js"],"sourcesContent":["import React from \"react\";\nexport const BASE_URL = 'https://strangers-things.herokuapp.com';\nexport const cohortName = '2206-ftb-et-web-ft-b';\n\n\n\nexport const postMessage = async (colonlessPostId, token, messageContent) => {\n\n    try {\n        const response = await fetch (`${BASE_URL}/api/${cohortName}/posts/${colonlessPostId}/messages`,\n        {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                message: {\n                \"content\": messageContent\n                }\n            })\n        });\n        const result = await response.json();\n                console.log(\"sucess?: \", result.success)\n                console.log(\"fetch returning: \", result.data)\n            return result.data;\n    } catch(error) {\n            console.error(error)\n        }\n}\n\n\nexport const patchEdit = async (colonlessPostId, token, title, description, price, location, willDeliver) => {\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${colonlessPostId}`,\n        {\n            method: \"PATCH\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post: {\n                    \"title\": title,\n                    \"description\": description,\n                    \"price\": price,\n                    \"location\": location,\n                    \"willDeliver\": willDeliver\n                }\n                })\n        });\n            const result = await response.json();\n                console.log(\"sucess?: \", result.success)\n                console.log(\"fetch returning: \", result.data.post)\n            return result.data.post;\n    } catch(error) {\n            console.error(error)\n        }\n\n}\n\n\n\n\nexport const deletePost = async (token, postID) => {\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${postID}`,\n        {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n        });\n        const result = await response.json();\n        return result;\n        } catch(error) {\n            console.error(error)\n        }\n}\n\nexport const postPost = async (token, title, description, price, location, willDeliver) => {\n    try{\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`,\n        {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post: {\n                    \"title\": title,\n                    \"description\": description,\n                    \"price\": price,\n                    \"location\": location,\n                    \"willDeliver\": willDeliver\n                }\n                })\n\n        }\n        );\n            const result = await response.json();\n            return result.data.post;\n    } catch(error) {\n        console.error(error)\n    }\n}\n\n\n\n\nexport const getMe = async (token) =>  {\n\n    try{\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/me`,\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n            }\n        );\n            const result = await response.json();\n            return result;\n    } catch(error) {\n        console.error(error)\n    }\n\n}\n\n\nexport const postLogIn = async (username, password) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/login`, \n                {\n                    method: \"POST\",\n                    headers: {\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                    user: {\n                        \"username\": username,\n                        \"password\": password\n                    }\n                    })\n                }\n        );\n            const result = await response.json()\n            if (result.success){\n                return result;\n            }\n            else {\n                return result.error\n            }\n            ;\n        }\n        catch(error){\n            console.log(error)\n        }\n}\n\n\n\nexport const postNewUser = async (username, password) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/register`, \n                {\n                    method: \"POST\",\n                    headers: {\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                    user: {\n                        \"username\": username,\n                        \"password\": password\n                    }\n                    })\n                }\n            );\n            const result = await response.json()\n            const resultToken = result.data.token\n            return resultToken;\n        }\n        catch(error){\n            console.error(error)\n        }\n}\n\nexport const fetchPosts = async () => {\n \n    try {\n      const response = await fetch(`${ BASE_URL }/api/${ cohortName }/posts`);\n      const data = await response.json();\n      const actualPosts = data.data.posts\n      return actualPosts;\n    } catch (error) {\n      console.error(error);\n      }\n  }\n\n  export const fetchAllPosts = async (token) => {\n    try {\n        const response = await fetch(`${ BASE_URL }/api/${ cohortName }/posts`,\n        {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n        });\n        const data = await response.json();\n        const actualPosts = data.data.posts\n        return actualPosts;\n    } catch (error) {\n        console.error(error)\n        } \n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}