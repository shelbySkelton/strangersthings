{"ast":null,"code":"import React from \"react\";\nexport const BASE_URL = 'https://strangers-things.herokuapp.com';\nexport const cohortName = '2206-ftb-et-web-ft-b'; // export const testToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmQyMWVkZWM3ODA5MDAwMTcxMzA1NGQiLCJ1c2VybmFtZSI6InNuczA5ZiIsImlhdCI6MTY1NzkzNzYzMH0.sYZ0u-ZbNaeu3ZrAuZakv9s9eErRBdkdhtJM2eAUV9Q'\n\nexport const deletePost = async (token, postID) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${postID}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const postPost = async (token, title, description, price, location, willDeliver) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          \"title\": title,\n          \"description\": description,\n          \"price\": price,\n          \"location\": location,\n          \"willDeliver\": willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    console.log(result.data.post);\n    return result.data.post;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const getMe = async token => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const postLogIn = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          \"username\": username,\n          \"password\": password\n        }\n      })\n    });\n    const result = await response.json();\n\n    if (result.success) {\n      console.log('successful pull');\n      return result;\n    } else {\n      console.log(result.error);\n      return result.error;\n    }\n\n    ;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postNewUser = async (username, password) => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          \"username\": username,\n          \"password\": password\n        }\n      })\n    });\n    const result = await response.json();\n    const resultToken = result.data.token;\n    return resultToken;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchPosts = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`);\n    const data = await response.json();\n    const actualPosts = data.data.posts;\n    return actualPosts;\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"names":["React","BASE_URL","cohortName","deletePost","token","postID","response","fetch","method","headers","result","json","error","console","postPost","title","description","price","location","willDeliver","body","JSON","stringify","post","log","data","getMe","postLogIn","username","password","user","success","postNewUser","resultToken","fetchPosts","actualPosts","posts"],"sources":["/Users/helby1/Desktop/FULL STACK ACADEMY/Course_Work/project_09/Strangers Things/src/api/index.js"],"sourcesContent":["import React from \"react\";\nexport const BASE_URL = 'https://strangers-things.herokuapp.com';\nexport const cohortName = '2206-ftb-et-web-ft-b';\n// export const testToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmQyMWVkZWM3ODA5MDAwMTcxMzA1NGQiLCJ1c2VybmFtZSI6InNuczA5ZiIsImlhdCI6MTY1NzkzNzYzMH0.sYZ0u-ZbNaeu3ZrAuZakv9s9eErRBdkdhtJM2eAUV9Q'\n\n\n\nexport const deletePost = async (token, postID) => {\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/posts/${postID}`,\n        {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n        });\n        const result = await response.json();\n        return result;\n        } catch(error) {\n            console.error(error)\n        }\n}\n\nexport const postPost = async (token, title, description, price, location, willDeliver) => {\n    try{\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/posts`,\n        {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post: {\n                    \"title\": title,\n                    \"description\": description,\n                    \"price\": price,\n                    \"location\": location,\n                    \"willDeliver\": willDeliver\n                }\n                })\n\n        }\n        );\n            const result = await response.json();\n            console.log(result.data.post)\n            return result.data.post;\n    } catch(error) {\n        console.error(error)\n    }\n}\n\n\n\n\nexport const getMe = async (token) =>  {\n\n    try{\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/me`,\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                },\n            }\n        );\n            const result = await response.json();\n            return result;\n    } catch(error) {\n        console.error(error)\n    }\n\n}\n\n\nexport const postLogIn = async (username, password) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/login`, \n                {\n                    method: \"POST\",\n                    headers: {\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                    user: {\n                        \"username\": username,\n                        \"password\": password\n                    }\n                    })\n                }\n        );\n            const result = await response.json()\n            if (result.success){\n                console.log('successful pull');\n                return result;\n            }\n            else {\n                console.log(result.error)\n                return result.error\n            }\n            ;\n        }\n        catch(error){\n            console.log(error)\n        }\n}\n\n\n\nexport const postNewUser = async (username, password) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/api/${cohortName}/users/register`, \n                {\n                    method: \"POST\",\n                    headers: {\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                    user: {\n                        \"username\": username,\n                        \"password\": password\n                    }\n                    })\n                }\n            );\n            const result = await response.json()\n            const resultToken = result.data.token\n            return resultToken;\n        }\n        catch(error){\n            console.error(error)\n        }\n}\n\nexport const fetchPosts = async () => {\n \n    try {\n      const response = await fetch(`${ BASE_URL }/api/${ cohortName }/posts`);\n      const data = await response.json();\n      const actualPosts = data.data.posts\n      return actualPosts;\n    } catch (error) {\n      console.error(error);\n      }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}